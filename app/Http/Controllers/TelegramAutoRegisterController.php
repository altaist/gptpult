<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\TelegramLinkToken;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Inertia\Inertia;

class TelegramAutoRegisterController extends Controller
{
    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
     */
    public function show(Request $request)
    {
        $telegramId = $request->get('telegram_id');
        $telegramUsername = $request->get('telegram_username');
        
        if (!$telegramId) {
            return redirect('/')->with('error', '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        $existingUser = User::where('telegram_id', $telegramId)->first();
        
        if ($existingUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –µ–≥–æ
            Auth::login($existingUser);
            return redirect('/lk')->with('success', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!');
        }
        
        return Inertia::render('auth/telegram-register', [
            'telegram_id' => $telegramId,
            'telegram_username' => $telegramUsername
        ]);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
     */
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'telegram_id' => 'required|string',
            'telegram_username' => 'nullable|string|max:255',
            'accept_terms' => 'required|accepted'
        ]);
        
        $telegramId = $request->telegram_id;
        $telegramUsername = $request->telegram_username;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        $existingUser = User::where('telegram_id', $telegramId)->first();
        
        if ($existingUser) {
            Auth::login($existingUser);
            return redirect('/lk')->with('success', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!');
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::create([
            'name' => $request->name,
            'email' => 'telegram_' . $telegramId . '@auto.user',
            'password' => Hash::make(Str::random(32)),
            'telegram_id' => $telegramId,
            'telegram_username' => $telegramUsername,
            'telegram_connected_at' => now(),
            'role_id' => 0, // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            'status' => 1, // –ê–∫—Ç–∏–≤–Ω—ã–π
            'balance_rub' => 0,
            'person' => [
                'telegram' => [
                    'id' => $telegramId,
                    'username' => $telegramUsername,
                    'registered_via' => 'telegram_bot'
                ]
            ],
            'settings' => [],
            'statistics' => []
        ]);
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Auth::login($user);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        $this->notifySuccessfulRegistration($telegramId, $user->name);
        
        return redirect('/lk')->with('success', '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å Telegram!');
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    private function notifySuccessfulRegistration($telegramId, $userName): void
    {
        $botToken = config('telegram.bot_token');
        $appUrl = config('app.url');
        
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω URL
        $buttonUrl = str_contains($appUrl, 'localhost') || str_contains($appUrl, '127.0.0.1') 
            ? 'https://gptpult.ru' 
            : $appUrl;
        
        if (!$botToken) {
            return;
        }
        
        $text = "üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n";
        $text .= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT PULT, <b>{$userName}</b>!\n\n";
        $text .= "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å Telegram\n";
        $text .= "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n";
        $text .= "üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 0 ‚ÇΩ\n\n";
        $text .= "üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!";
        
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                        'url' => $buttonUrl . '/lk'
                    ]
                ],
                [
                    [
                        'text' => 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                        'url' => $buttonUrl . '/new'
                    ]
                ]
            ]
        ];
        
        $this->sendTelegramMessage($telegramId, $text, $keyboard);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    private function sendTelegramMessage($chatId, $text, $keyboard = null): void
    {
        $botToken = config('telegram.bot_token');
        
        if (!$botToken) {
            return;
        }
        
        $url = "https://api.telegram.org/bot{$botToken}/sendMessage";
        
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        
        $response = curl_exec($ch);
        curl_close($ch);
    }
} 