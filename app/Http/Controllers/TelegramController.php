<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    public function getBotLink(Request $request): JsonResponse
    {
        $user = $request->user();
        
        // –ò–º—è –±–æ—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ .env)
        $botUsername = config('telegram.bot_username', 'your_bot_username');
        
        // –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $telegramUrl = "https://t.me/{$botUsername}?start={$user->id}";
        
        return response()->json([
            'bot_url' => $telegramUrl,
            'user_id' => $user->id
        ]);
    }
    
    /**
     * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
     */
    public function webhook(Request $request): JsonResponse
    {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            Log::info('Telegram webhook called', [
                'headers' => $request->headers->all(),
                'ip' => $request->ip(),
                'method' => $request->method(),
                'url' => $request->fullUrl()
            ]);
            
            $update = $request->all();
            
            Log::info('Telegram webhook received:', $update);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!isset($update['message'])) {
                Log::info('No message in update, skipping');
                return response()->json(['status' => 'ok']);
            }
            
            $message = $update['message'];
            $telegramUserId = $message['from']['id'];
            $telegramUsername = $message['from']['username'] ?? null;
            $text = $message['text'] ?? '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /start —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (str_starts_with($text, '/start ')) {
                $userId = str_replace('/start ', '', $text);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                if (is_numeric($userId)) {
                    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
                    $user = User::find($userId);
                    
                    if ($user && !$user->telegram_id) {
                        // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–≤—è–∑–∞–Ω
                        $user->update([
                            'telegram_id' => $telegramUserId,
                            'telegram_username' => $telegramUsername,
                            'telegram_connected_at' => now()
                        ]);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
                        $this->sendSuccessMessage($telegramUserId, $user->name);
                        
                        Log::info("User {$user->id} connected Telegram account {$telegramUserId}");
                    } elseif ($user && $user->telegram_id) {
                        // –ï—Å–ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        $this->sendAlreadyConnectedMessage($telegramUserId, $user->name);
                    }
                }
            } elseif ($text === '/start') {
                // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                $this->sendWelcomeMessage($telegramUserId);
            }
            
            return response()->json(['status' => 'ok']);
            
        } catch (\Exception $e) {
            Log::error('Telegram webhook error: ' . $e->getMessage());
            return response()->json(['status' => 'error'], 500);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–≤—è–∑–∫–µ
     */
    private function sendSuccessMessage($chatId, $userName): void
    {
        $botToken = config('telegram.bot_token');
        $appUrl = config('app.url');
        
        if (!$botToken) {
            Log::warning('Telegram bot token not configured');
            return;
        }
        
        $text = "üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!</b>\n\n";
        $text .= "–ü—Ä–∏–≤–µ—Ç, <b>{$userName}</b>!\n";
        $text .= "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä—è–º–æ –≤ Telegram.\n\n";
        $text .= "‚úÖ –°–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
        $text .= "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã";
        
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å',
                        'url' => $appUrl . '/lk'
                    ]
                ]
            ]
        ];
        
        $this->sendTelegramMessage($chatId, $text, $keyboard);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω
     */
    private function sendAlreadyConnectedMessage($chatId, $userName): void
    {
        $appUrl = config('app.url');
        
        $text = "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω</b>\n\n";
        $text .= "–ü—Ä–∏–≤–µ—Ç, <b>{$userName}</b>!\n";
        $text .= "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º Telegram.\n";
        $text .= "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.";
        
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üè† –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
                        'url' => $appUrl . '/lk'
                    ]
                ]
            ]
        ];
        
        $this->sendTelegramMessage($chatId, $text, $keyboard);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function sendWelcomeMessage($chatId): void
    {
        $appUrl = config('app.url');
        
        $text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT PULT Bot!</b>\n\n";
        $text .= "–î–ª—è —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n";
        $text .= "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n";
        $text .= "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –¢–µ–ª–µ–≥—Ä–∞–º\"\n";
        $text .= "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start\n\n";
        $text .= "üîó –°–≤—è–∑–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤";
        
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç',
                        'url' => $appUrl
                    ]
                ]
            ]
        ];
        
        $this->sendTelegramMessage($chatId, $text, $keyboard);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
     */
    private function sendTelegramMessage($chatId, $text, $keyboard = null): void
    {
        $botToken = config('telegram.bot_token');
        
        if (!$botToken) {
            Log::warning('Telegram bot token not configured');
            return;
        }
        
        $url = "https://api.telegram.org/bot{$botToken}/sendMessage";
        
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        $response = curl_exec($ch);
        curl_close($ch);
        
        if ($response === false) {
            Log::error('Failed to send Telegram message');
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    public function checkConnection(Request $request): JsonResponse
    {
        $user = $request->user();
        
        return response()->json([
            'is_connected' => !empty($user->telegram_id),
            'telegram_username' => $user->telegram_username,
            'connected_at' => $user->telegram_connected_at
        ]);
    }
}
