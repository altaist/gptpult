<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class QueueMonitorRealtime extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:monitor-realtime {--interval=5 : –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö} {--document-id= : ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π';

    private $startTime;
    private $lastJobsCount = 0;
    private $processedJobs = 0;
    private $failedJobs = 0;

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->startTime = now();
        $interval = (int) $this->option('interval');
        $documentId = $this->option('document-id');
        
        $this->info('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        $this->info("üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$interval} —Å–µ–∫—É–Ω–¥");
        
        if ($documentId) {
            $this->info("üéØ –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É ID: {$documentId}");
        }
        
        $this->info('üìã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
        $this->line('');
        
        while (true) {
            $this->clearScreen();
            $this->displayHeader();
            $this->displayQueueStats($documentId);
            $this->displayActiveJobs($documentId);
            $this->displayRecentActivity($documentId);
            $this->displaySystemInfo();
            
            sleep($interval);
        }
        
        return 0;
    }
    
    private function clearScreen()
    {
        // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è Unix/Linux/Mac
        if (PHP_OS_FAMILY !== 'Windows') {
            system('clear');
        } else {
            system('cls');
        }
    }
    
    private function displayHeader()
    {
        $uptime = $this->startTime->diffForHumans(now(), true);
        $this->info("üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ß–ï–†–ï–î–ò LARAVEL - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {$uptime}");
        $this->info('‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' . now()->format('Y-m-d H:i:s'));
        $this->line('');
    }
    
    private function displayQueueStats($documentId = null)
    {
        $this->info('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ï–†–ï–î–ò:');
        $this->line('');
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $activeJobs = DB::table('jobs');
        if ($documentId) {
            $activeJobs->where('payload', 'like', '%"document_id":' . $documentId . '%');
        }
        $activeJobsCount = $activeJobs->count();
        
        // –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $failedJobs = DB::table('failed_jobs');
        if ($documentId) {
            $failedJobs->where('payload', 'like', '%"document_id":' . $documentId . '%');
        }
        $failedJobsCount = $failedJobs->count();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥—è–º
        $queueStats = DB::table('jobs')
            ->select('queue', DB::raw('count(*) as count'))
            ->groupBy('queue')
            ->get();
            
        $this->line("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {$activeJobsCount}");
        $this->line("‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: {$failedJobsCount}");
        $this->line("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {$this->processedJobs}");
        
        $this->line('');
        $this->info('üìä –ü–æ –æ—á–µ—Ä–µ–¥—è–º:');
        foreach ($queueStats as $stat) {
            $this->line("   {$stat->queue}: {$stat->count} –∑–∞–¥–∞—á");
        }
        
        $this->line('');
    }
    
    private function displayActiveJobs($documentId = null)
    {
        $this->info('üîÑ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:');
        $this->line('');
        
        $query = DB::table('jobs')
            ->select('id', 'queue', 'payload', 'created_at', 'available_at', 'attempts')
            ->orderBy('created_at', 'desc')
            ->limit(10);
            
        if ($documentId) {
            $query->where('payload', 'like', '%"document_id":' . $documentId . '%');
        }
        
        $jobs = $query->get();
        
        if ($jobs->isEmpty()) {
            $this->line('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
        } else {
            $headers = ['ID', '–û—á–µ—Ä–µ–¥—å', '–ö–ª–∞—Å—Å', '–î–æ–∫—É–º–µ–Ω—Ç', '–°–æ–∑–¥–∞–Ω–∞', '–î–æ—Å—Ç—É–ø–Ω–∞', '–ü–æ–ø—ã—Ç–∫–∏'];
            $rows = [];
            
            foreach ($jobs as $job) {
                $payload = json_decode($job->payload, true);
                $jobClass = $payload['displayName'] ?? $payload['job'] ?? 'Unknown';
                $documentIdFromPayload = $payload['data']['document']['id'] ?? 'N/A';
                
                $rows[] = [
                    $job->id,
                    $job->queue,
                    $this->truncateString($jobClass, 25),
                    $documentIdFromPayload,
                    Carbon::createFromTimestamp($job->created_at)->format('H:i:s'),
                    Carbon::createFromTimestamp($job->available_at)->format('H:i:s'),
                    $job->attempts
                ];
            }
            
            $this->table($headers, $rows);
        }
        
        $this->line('');
    }
    
    private function displayRecentActivity($documentId = null)
    {
        $this->info('üìù –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø (–∏–∑ queue_operations.log):');
        $this->line('');
        
        $logFile = storage_path('logs/queue_operations.log');
        
        if (!file_exists($logFile)) {
            $this->line('   –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            $this->line('');
            return;
        }
        
        $lines = [];
        $handle = fopen($logFile, 'r');
        
        if ($handle) {
            // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            $buffer = '';
            $pos = -1;
            $lineCount = 0;
            
            fseek($handle, $pos, SEEK_END);
            
            while ($lineCount < 20 && ftell($handle) > 0) {
                $char = fgetc($handle);
                if ($char === "\n") {
                    if (!empty(trim($buffer))) {
                        $lines[] = strrev($buffer);
                        $lineCount++;
                    }
                    $buffer = '';
                } else {
                    $buffer .= $char;
                }
                fseek($handle, --$pos, SEEK_END);
            }
            
            if (!empty(trim($buffer))) {
                $lines[] = strrev($buffer);
            }
            
            fclose($handle);
        }
        
        $lines = array_reverse($lines);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ document_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if ($documentId) {
            $lines = array_filter($lines, function($line) use ($documentId) {
                return strpos($line, '"document_id":' . $documentId) !== false;
            });
        }
        
        $displayLines = array_slice($lines, -10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        
        foreach ($displayLines as $line) {
            if (strpos($line, 'üîÑ JOB QUEUED') !== false) {
                $this->line('<fg=blue>   ' . $this->extractLogInfo($line) . '</>');
            } elseif (strpos($line, '‚ñ∂Ô∏è JOB PROCESSING') !== false) {
                $this->line('<fg=yellow>   ' . $this->extractLogInfo($line) . '</>');
            } elseif (strpos($line, '‚úÖ JOB PROCESSED') !== false) {
                $this->line('<fg=green>   ' . $this->extractLogInfo($line) . '</>');
            } elseif (strpos($line, '‚ùå JOB FAILED') !== false) {
                $this->line('<fg=red>   ' . $this->extractLogInfo($line) . '</>');
            } elseif (strpos($line, 'üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò') !== false) {
                $this->line('<fg=cyan>   ' . $this->extractLogInfo($line) . '</>');
            } elseif (strpos($line, 'üåê API –ó–ê–ü–†–û–°') !== false) {
                $this->line('<fg=magenta>   ' . $this->extractLogInfo($line) . '</>');
            } else {
                $this->line('   ' . $this->extractLogInfo($line));
            }
        }
        
        $this->line('');
    }
    
    private function displaySystemInfo()
    {
        $this->info('üíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
        $this->line('');
        
        $memoryUsage = round(memory_get_usage(true) / 1024 / 1024, 2);
        $memoryPeak = round(memory_get_peak_usage(true) / 1024 / 1024, 2);
        
        $this->line("üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {$memoryUsage} MB (–ø–∏–∫: {$memoryPeak} MB)");
        $this->line("üîß PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION);
        $this->line("üÜî Process ID: " . getmypid());
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö
        $this->line('');
        $this->info('üë∑ –í–û–†–ö–ï–†–´:');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö
        $processes = [];
        if (function_exists('exec')) {
            exec('ps aux | grep "queue:work" | grep -v grep', $processes);
        }
        
        if (empty($processes)) {
            $this->line('   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        } else {
            $this->line("   –ù–∞–π–¥–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: " . count($processes));
            foreach (array_slice($processes, 0, 3) as $process) {
                $this->line('   ' . $this->truncateString($process, 80));
            }
        }
    }
    
    private function extractLogInfo($line)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
        if (preg_match('/\[(.*?)\].*?production\.\w+:\s*(.+)/', $line, $matches)) {
            $time = Carbon::parse($matches[1])->format('H:i:s');
            $message = $matches[2];
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (preg_match('/({.*})/', $message, $jsonMatches)) {
                $data = json_decode($jsonMatches[1], true);
                if ($data && isset($data['document_id'])) {
                    $docId = $data['document_id'];
                    $event = $data['event'] ?? 'unknown';
                    return "{$time} [{$event}] Doc:{$docId}";
                }
            }
            
            return "{$time} {$message}";
        }
        
        return $this->truncateString($line, 100);
    }
    
    private function truncateString($string, $length)
    {
        return strlen($string) > $length ? substr($string, 0, $length - 3) . '...' : $string;
    }
} 