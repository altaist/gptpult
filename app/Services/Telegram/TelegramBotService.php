<?php

namespace App\Services\Telegram;

use App\Models\User;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class TelegramBotService
{
    private string $botToken;
    private string $baseUrl;

    public function __construct()
    {
        $this->botToken = config('services.telegram.bot_token');
        $this->baseUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public function sendMessage(int $chatId, string $text, array $keyboard = null): array
    {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];

        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }

        Log::info('Sending Telegram message', [
            'chat_id' => $chatId,
            'text_length' => strlen($text),
            'has_keyboard' => !empty($keyboard)
        ]);

        $result = $this->makeRequest('sendMessage', $data);
        
        Log::info('Telegram message send result', [
            'success' => $result['ok'] ?? false,
            'message_id' => $result['result']['message_id'] ?? null,
            'error' => $result['description'] ?? null
        ]);

        return $result;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Ö—É–∫
     */
    public function setWebhook(string $url): array
    {
        return $this->makeRequest('setWebhook', [
            'url' => $url,
            'allowed_updates' => ['message', 'callback_query']
        ]);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–µ–±-—Ö—É–∫
     */
    public function deleteWebhook(): array
    {
        return $this->makeRequest('deleteWebhook');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±-—Ö—É–∫–µ
     */
    public function getWebhookInfo(): array
    {
        return $this->makeRequest('getWebhookInfo');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    public function getMe(): array
    {
        return $this->makeRequest('getMe');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /start —Å —Ç–æ–∫–µ–Ω–æ–º
     */
    public function handleStart(array $message): array
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $user = $message['from'];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        if (preg_match('/^\/start\s+(.+)$/', $text, $matches)) {
            $token = trim($matches[1]);
            return $this->linkTelegramAccount($chatId, $user, $token);
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        $linkedUser = User::where('telegram_id', $chatId)->first();
        
        if ($linkedUser) {
            return $this->sendLinkedUserMenu($chatId, $linkedUser);
        }

        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–≤—è–∑–∫–µ
        return $this->sendMessage($chatId, 
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT –ü—É–ª—å—Ç!</b>\n\n" .
            "–î–ª—è —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Telegram –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–°–≤—è–∑–∞—Ç—å\"</b> –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n" .
            "–ü–æ—Å–ª–µ —Å–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n" .
            "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –õ–ö –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n" .
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" .
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n\n" .
            "üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @gptpult_support"
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function handleMessage(array $message): array
    {
        $chatId = $message['chat']['id'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        $linkedUser = User::where('telegram_id', $chatId)->first();
        
        if ($linkedUser) {
            return $this->sendLinkedUserMenu($chatId, $linkedUser);
        }

        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        return $this->sendMessage($chatId, 
            "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n" .
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å –≤–∞—à Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º GPT –ü—É–ª—å—Ç.\n\n" .
            "–í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–°–≤—è–∑–∞—Ç—å\"</b> –≤ —Ä–∞–∑–¥–µ–ª–µ Telegram.\n\n" .
            "üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @gptpult_support"
        );
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function sendLinkedUserMenu(int $chatId, User $user): array
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$user->auth_token) {
            $user->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
            $user->refresh();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $baseUrl = $this->getBaseUrl();
        $isHttps = str_starts_with($baseUrl, 'https://');

        $messageText = "üëã <b>–ü—Ä–∏–≤–µ—Ç, {$user->name}!</b>\n\n" .
            "üîó –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å Telegram\n" .
            "üí∞ –ë–∞–ª–∞–Ω—Å: " . number_format($user->balance_rub ?? 0, 0, ',', ' ') . " ‚ÇΩ\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if ($isHttps) {
            // –î–ª—è HTTPS –∏—Å–ø–æ–ª—å–∑—É–µ–º Mini App
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                            'web_app' => ['url' => $baseUrl . '/lk']
                        ]
                    ],
                    [
                        [
                            'text' => 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                            'web_app' => ['url' => $baseUrl . '/new']
                        ]
                    ],
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_support'
                        ]
                    ]
                ]
            ];
        } else {
            // –î–ª—è HTTP –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ URL —Å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º
            $lkUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/lk');
            $newDocUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/new');
            
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                            'url' => $lkUrl
                        ]
                    ],
                    [
                        [
                            'text' => 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                            'url' => $newDocUrl
                        ]
                    ],
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_support'
                        ]
                    ]
                ]
            ];
        }

        return $this->sendMessage($chatId, $messageText, $keyboard);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private function getBaseUrl(): string
    {
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π URL
        if (app()->environment('local')) {
            return config('services.telegram.test_app_url');
        }
        
        return config('app.url');
    }

    /**
     * –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public function linkTelegramAccount(int $chatId, array $telegramUser, string $token): array
    {
        Log::info('Starting Telegram account linking', [
            'chat_id' => $chatId,
            'token' => $token,
            'telegram_user' => $telegramUser
        ]);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–≤—è–∑–∫–∏
        $user = User::where('telegram_link_token', $token)->first();

        if (!$user) {
            Log::warning('Invalid link token', ['token' => $token]);
            return $this->sendMessage($chatId, 
                "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏.\n\n" .
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
            );
        }

        Log::info('User found by token', ['user_id' => $user->id, 'user_name' => $user->name]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç
        $existingUser = User::where('telegram_id', $chatId)->first();
        if ($existingUser && $existingUser->id !== $user->id) {
            Log::warning('Telegram account already linked to another user', [
                'chat_id' => $chatId,
                'existing_user_id' => $existingUser->id,
                'current_user_id' => $user->id
            ]);
            return $this->sendMessage($chatId, 
                "‚ùå –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥—Ä—É–≥–∏–º Telegram
        if ($user->telegram_id && $user->telegram_id !== $chatId) {
            Log::warning('User already linked to another Telegram', [
                'user_id' => $user->id,
                'existing_telegram_id' => $user->telegram_id,
                'new_chat_id' => $chatId
            ]);
            return $this->sendMessage($chatId, 
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º Telegram.\n\n" .
                "–û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç = –æ–¥–∏–Ω Telegram!"
            );
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $userName = $telegramUser['first_name'] . (($telegramUser['last_name'] ?? '') ? ' ' . $telegramUser['last_name'] : '');
        
        Log::info('Updating user with Telegram data', [
            'user_id' => $user->id,
            'chat_id' => $chatId,
            'username' => $telegramUser['username'] ?? null,
            'new_name' => $userName
        ]);

        // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        $updateResult = $user->update([
            'telegram_id' => $chatId,
            'telegram_username' => $telegramUser['username'] ?? null,
            'telegram_linked_at' => now(),
            'telegram_link_token' => null, // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
            'name' => $userName,
        ]);

        Log::info('User update result', ['success' => $updateResult]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$user->auth_token) {
            Log::warning('User has no auth_token, generating new one', ['user_id' => $user->id]);
            $user->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
            $user->refresh();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Mini App –∏–ª–∏ fallback
        $baseUrl = $this->getBaseUrl();
        $isHttps = str_starts_with($baseUrl, 'https://');
        
        Log::info('Telegram account linked successfully', [
            'user_id' => $user->id,
            'telegram_id' => $chatId,
            'telegram_username' => $telegramUser['username'] ?? null
        ]);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if ($isHttps) {
            // –î–ª—è HTTPS –∏—Å–ø–æ–ª—å–∑—É–µ–º Mini App
            $keyboard = [
                'inline_keyboard' => [[
                    [
                        'text' => 'üîó –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                        'web_app' => ['url' => $baseUrl . '/lk']
                    ]
                ]]
            ];
        } else {
            // –î–ª—è HTTP –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π URL —Å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º
            $loginUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/lk');
            $keyboard = [
                'inline_keyboard' => [[
                    [
                        'text' => 'üîó –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                        'url' => $loginUrl
                    ]
                ]]
            ];
        }

        Log::info('Sending success message with keyboard', ['keyboard' => $keyboard, 'is_https' => $isHttps]);

        $messageText = "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!</b>\n\n" .
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$user->name}!\n\n" .
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º:";

        return $this->sendMessage($chatId, $messageText, $keyboard);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function generateLinkToken(User $user): string
    {
        $token = Str::random(32);
        
        $user->update([
            'telegram_link_token' => $token
        ]);

        return $token;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
     */
    public function getBotLinkUrl(string $token): string
    {
        $botUsername = config('services.telegram.bot_username');
        return "https://t.me/{$botUsername}?start={$token}";
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API
     */
    private function makeRequest(string $method, array $data = []): array
    {
        try {
            $response = Http::timeout(10)->post("{$this->baseUrl}/{$method}", $data);
            
            $result = $response->json();
            
            if (!$response->successful() || !$result['ok']) {
                Log::error('Telegram API error', [
                    'method' => $method,
                    'data' => $data,
                    'response' => $result
                ]);
            }
            
            return $result;
        } catch (\Exception $e) {
            Log::error('Telegram API request failed', [
                'method' => $method,
                'error' => $e->getMessage()
            ]);
            
            return ['ok' => false, 'error' => $e->getMessage()];
        }
    }
} 