<?php

namespace App\Jobs;

use App\Enums\DocumentStatus;
use App\Events\GptRequestCompleted;
use App\Events\GptRequestFailed;
use App\Models\Document;
use App\Models\GptRequest;
use App\Services\Gpt\GptServiceFactory;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;

class AsyncGenerateDocument implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $timeout = 600;
    public $tries = 3;
    public $backoff = [30, 60, 120]; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff

    public function __construct(
        protected Document $document,
        protected array $options = []
    ) {
        $this->onQueue('document_creates');
    }

    public function handle(GptServiceFactory $factory): void
    {
        $startTime = microtime(true);
        
        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            $this->document = $this->document->fresh() ?? $this->document;
            
            Log::channel('queue')->info('üöÄ –ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', [
                'document_id' => $this->document->id,
                'worker_name' => $this->job->getConnectionName() ?? 'unknown',
                'attempt' => $this->attempts()
            ]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if ($this->isDocumentLocked()) {
                Log::channel('queue')->info('üìã –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º worker\'–æ–º', [
                    'document_id' => $this->document->id
                ]);
                $this->release(30); // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            $this->lockDocument();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            $this->document->update(['status' => DocumentStatus::PRE_GENERATING]);

            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
            $gptSettings = $this->document->gpt_settings ?? [];
            $service = $gptSettings['service'] ?? 'openai';
            $gptService = $factory->make($service);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Assistant API —Å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            $result = $this->processWithAssistant($gptService);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            $this->processResult($result);

            // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            $executionTime = microtime(true) - $startTime;
            
            Log::channel('queue')->info('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', [
                'document_id' => $this->document->id,
                'execution_time' => round($executionTime, 2),
                'tokens_used' => $result['tokens_used'] ?? 0
            ]);

        } catch (\Exception $e) {
            $this->handleError($e);
        } finally {
            // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            $this->unlockDocument();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
     */
    private function isDocumentLocked(): bool
    {
        return Cache::has("document_lock_{$this->document->id}");
    }

    /**
     * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    private function lockDocument(): void
    {
        Cache::put("document_lock_{$this->document->id}", true, now()->addMinutes(10));
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
     */
    private function unlockDocument(): void
    {
        Cache::forget("document_lock_{$this->document->id}");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å Assistant API —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
     */
    private function processWithAssistant($gptService): array
    {
        $assistantId = 'asst_OwXAXycYmcU85DAeqShRkhYa';
        
        // –°–æ–∑–¥–∞–µ–º thread
        $thread = $gptService->createThread();
        $this->document->update(['thread_id' => $thread['id']]);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $prompt = $this->buildPrompt();
        $gptService->safeAddMessageToThread($thread['id'], $prompt);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ–º run
        $run = $gptService->safeCreateRun($thread['id'], $assistantId);

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        $result = $this->waitForRunWithOptimizedPolling($gptService, $thread['id'], $run['id']);

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        $messages = $gptService->getThreadMessages($thread['id']);
        
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        $assistantMessage = null;
        foreach ($messages['data'] as $message) {
            if ($message['role'] === 'assistant') {
                $assistantMessage = $message['content'][0]['text']['value'];
                break;
            }
        }

        if (!$assistantMessage) {
            throw new \Exception('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
        }

        return [
            'content' => $assistantMessage,
            'tokens_used' => $result['usage']['total_tokens'] ?? 0,
            'model' => $result['model'] ?? 'unknown'
        ];
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    private function waitForRunWithOptimizedPolling($gptService, $threadId, $runId): array
    {
        $maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        $attempts = 0;
        $delays = [2, 3, 5, 5, 10]; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        while ($attempts < $maxAttempts) {
            $run = $gptService->getRunStatus($threadId, $runId);
            
            if ($run['status'] === 'completed') {
                return $run;
            }
            
            if (in_array($run['status'], ['failed', 'cancelled', 'expired'])) {
                throw new \Exception("Run failed with status: {$run['status']}");
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            $delay = $delays[min($attempts, count($delays) - 1)];
            sleep($delay);
            $attempts++;
        }
        
        throw new \Exception('Run timeout: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    private function buildPrompt(): string
    {
        $topic = $this->document->topic;
        $additionalInfo = $this->document->additional_info ?? '';
        
        return "–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ç–µ–º—É: {$topic}\n\n" .
               "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {$additionalInfo}\n\n" .
               "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏ 'contents' –∏ 'objectives'.";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    private function processResult(array $result): void
    {
        $parsedData = $this->parseGptResponse($result['content']);
        
        $this->document->update([
            'status' => DocumentStatus::PRE_GENERATED,
            'structure' => $parsedData,
            'metadata' => array_merge($this->document->metadata ?? [], [
                'tokens_used' => $result['tokens_used'],
                'model' => $result['model'],
                'generation_time' => now()->toDateTimeString()
            ])
        ]);

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π GptRequest –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        $gptRequest = new GptRequest([
            'document_id' => $this->document->id,
            'prompt' => $this->buildPrompt(),
            'response' => $result['content'],
            'status' => 'completed',
            'metadata' => [
                'service' => $result['service'] ?? 'openai',
                'model' => $result['model'],
                'tokens_used' => $result['tokens_used'],
                'generation_type' => 'async'
            ]
        ]);
        $gptRequest->document = $this->document;

        event(new GptRequestCompleted($gptRequest));
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT
     */
    private function parseGptResponse(string $response): array
    {
        $jsonStart = strpos($response, '{');
        $jsonEnd = strrpos($response, '}');
        
        if ($jsonStart === false || $jsonEnd === false) {
            throw new \Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ GPT');
        }
        
        $jsonString = substr($response, $jsonStart, $jsonEnd - $jsonStart + 1);
        $data = json_decode($jsonString, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ' . json_last_error_msg());
        }
        
        return $data;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    private function handleError(\Exception $e): void
    {
        Log::channel('queue')->error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', [
            'document_id' => $this->document->id,
            'error' => $e->getMessage(),
            'attempt' => $this->attempts()
        ]);

        $this->document->update([
            'status' => DocumentStatus::PRE_GENERATION_FAILED,
            'error_message' => $e->getMessage()
        ]);

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π GptRequest –¥–ª—è —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏
        $gptRequest = new GptRequest([
            'document_id' => $this->document->id,
            'status' => 'failed',
            'error_message' => $e->getMessage(),
        ]);
        $gptRequest->document = $this->document;

        event(new GptRequestFailed($gptRequest, $e->getMessage()));
    }

    /**
     * –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
     */
    public function failed(\Exception $exception): void
    {
        $this->unlockDocument();
        
        Log::channel('queue')->error('üí• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞', [
            'document_id' => $this->document->id,
            'error' => $exception->getMessage(),
            'attempts' => $this->attempts()
        ]);
    }
} 